default: &defaults
    working_directory: ~/application
    docker:
    - image: circleci/node:10.10.0
    - image: mongo:4.0.2

# commands
cmd_restore_cache: &cmd_restore_cache
  restore_cache:
    keys:
      - v1-dependencies-{{ checksum "package.json" }}
      - v1-dependencies-

cmd_save_cache: &cmd_save_cache
  save_cache:
    paths:
      - node_modules
    key: v1-dependencies-{{ checksum "package.json" }}

cmd_update_npm: &cmd_update_npm
  run:
    name: Update npm
    command: 'sudo npm install -g npm@latest'

cmd_install_dependencies: &cmd_install_dependencies
  run:
    name: install-dependencies
    command: npm install

cmd_run_test: &cmd_run_test
  run:
    name: Run Test
    command: npm test

cmd_build_image: &cmd_build_image
  run:
    name: Build docker image
    command: docker build -t $IMAGE_NAME:latest .

cmd_publish_image: &cmd_publish_image
  run:
    name: Push docker image
    command: |
        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
        docker push -t $IMAGE_NAME:latest


version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - *cmd_restore_cache
      - *cmd_update_npm
      - *cmd_install_dependencies
      - *cmd_save_cache

  test:
    <<: *defaults
    steps:
      - checkout
      - *cmd_restore_cache
      - *cmd_update_npm
      - *cmd_install_dependencies
      - *cmd_run_test
      - *cmd_save_cache

  build_image:
    environment:
      IMAGE_NAME: gidraff/cheat-sheet-api
    docker:
    - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - *cmd_build_image


  publish_image:
    environment:
      IMAGE_NAME: cheat-sheet-api
    docker:
    - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - *cmd_publish_image

workflows:
  version: 2
  workflow:
    jobs:
    - build
    - test:
          requires:
            - build
    - build_image:
          requires:
            - test
    - publish_image:
          requires:
            - build_image



             deploy_to_staging:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "my-app"
      - GOOGLE_PROJECT_ID: "xxx"
      - GOOGLE_COMPUTE_ZONE: "europe-west3-a"
      - GOOGLE_CLUSTER_NAME: "cluster-1"
    steps:
      - checkout
      - run: 
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run: 
          name: Docker build and push
          command: |
            docker build \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
              -t ${PROJECT_NAME} .
            docker tag ${PROJECT_NAME} eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
            docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
      - run: 
          name: Deploy to Kubernetes
          command: |
            envsubst < ${HOME}/project/k8s.yml > ${HOME}/patched_k8s.yml
            kubectl apply -f ${HOME}/patched_k8s.yml
            kubectl rollout status deployment/${PROJECT_NAME}
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build_and_test
      - deploy_to_staging:
          requires:
            - build_and_test
          filters:
            branches:
              only: master